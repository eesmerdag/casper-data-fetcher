// Code generated by MockGen. DO NOT EDIT.
// Source: data/db_connector.go

// Package mock_data is a generated GoMock package.
package data

import (
	models "cspr-fetcher/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBConnectorI is a mock of DBConnectorI interface.
type MockDBConnectorI struct {
	ctrl     *gomock.Controller
	recorder *MockDBConnectorIMockRecorder
}

// MockDBConnectorIMockRecorder is the mock recorder for MockDBConnectorI.
type MockDBConnectorIMockRecorder struct {
	mock *MockDBConnectorI
}

// NewMockDBConnectorI creates a new mock instance.
func NewMockDBConnectorI(ctrl *gomock.Controller) *MockDBConnectorI {
	mock := &MockDBConnectorI{ctrl: ctrl}
	mock.recorder = &MockDBConnectorIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBConnectorI) EXPECT() *MockDBConnectorIMockRecorder {
	return m.recorder
}

// GetAllBlocks mocks base method.
func (m *MockDBConnectorI) GetAllBlocks(limit, offset uint64) ([]*models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBlocks", limit, offset)
	ret0, _ := ret[0].([]*models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBlocks indicates an expected call of GetAllBlocks.
func (mr *MockDBConnectorIMockRecorder) GetAllBlocks(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBlocks", reflect.TypeOf((*MockDBConnectorI)(nil).GetAllBlocks), limit, offset)
}

// GetBlockByHeight mocks base method.
func (m *MockDBConnectorI) GetBlockByHeight(height uint64) (*models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHeight", height)
	ret0, _ := ret[0].(*models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight.
func (mr *MockDBConnectorIMockRecorder) GetBlockByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockDBConnectorI)(nil).GetBlockByHeight), height)
}

// GetLatestFetchedBlock mocks base method.
func (m *MockDBConnectorI) GetLatestFetchedBlock() (*models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestFetchedBlock")
	ret0, _ := ret[0].(*models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestFetchedBlock indicates an expected call of GetLatestFetchedBlock.
func (mr *MockDBConnectorIMockRecorder) GetLatestFetchedBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestFetchedBlock", reflect.TypeOf((*MockDBConnectorI)(nil).GetLatestFetchedBlock))
}

// InsertNewBlock mocks base method.
func (m *MockDBConnectorI) InsertNewBlock(bl models.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewBlock", bl)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewBlock indicates an expected call of InsertNewBlock.
func (mr *MockDBConnectorIMockRecorder) InsertNewBlock(bl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewBlock", reflect.TypeOf((*MockDBConnectorI)(nil).InsertNewBlock), bl)
}

// InsertTransfers mocks base method.
func (m *MockDBConnectorI) InsertTransfers(transfers []models.Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransfers", transfers)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransfers indicates an expected call of InsertTransfers.
func (mr *MockDBConnectorIMockRecorder) InsertTransfers(transfers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransfers", reflect.TypeOf((*MockDBConnectorI)(nil).InsertTransfers), transfers)
}
